#pragma warning(disable:4996)

#define hang 3

#define lie 3

#include<stdio.h>
#include<stdlib.h>
#include<time.h>

//函数声明
void ChuShiHua(char QiPan[hang][lie], int Hang, int Lie);
void DaYinQiPan(char QiPan[hang][lie], int Hang, int Lie);
void wanjiaxiaqi(char QiPan[hang][lie], int Hang, int Lie);
void diannaoxiaqi(char QiPan[hang][lie], int Hang, int Lie);


char panduan(char QiPan[hang][lie], int Hang, int Lie);//这个函数告诉我们四种状态
//玩家赢——返回'O'
//电脑赢——返回'X'
//平局——返回'P'
//继续——返回'J'
void ChuShiHua(char QiPan[hang][lie], int Hang, int Lie)
{
	int i = 0;//行数
	int j = 0;//列数
	for (i = 0;i < Hang;i++)
	{
		for (j = 0;j < Lie;j++)
		{
			QiPan[i][j] = ' ';
		}
	}
}
//下面这是没有优化的:
//void DaYinQiPan(char QiPan[hang][lie], int Hang, int Lie)
//{
//	int i = 0;
//	for (i = 0;i < hang;i++)
//	{
//		printf(" %c | %c | %c \n", QiPan[i][0], QiPan[i][1], QiPan[i][2]);//1.打印一行的数据
//		if(i<hang-i)
//			printf("---|---|---\n");//2.打印分割行
//	}
//}

//优化版,上面那种格式只能打印3X3的棋盘，不然就要修改代码
void DaYinQiPan(char QiPan[hang][lie], int Hang, int Lie)
{
	int i = 0;//行
	for (i = 0;i < Hang;i++)
	{
		int j = 0;//列
		for (j = 0;j < Lie; j++)//打印一行的数据
		{
			printf(" %c ", QiPan[i][j]);
			if (j < Lie - 1)
			{
				printf("|");
			}
		}
		printf("\n");
		if (i < Hang - 1)//打印分割线
		{
			for (j = 0;j < Lie;j++)
			{
				printf("---");
				if (j < Lie - 1)
				{
					printf("|");
				}
			}
			printf("\n");
		}
	}
}

void wanjiaxiaqi(char QiPan[hang][lie], int Hang, int Lie)
{
	int x = 0;
	int y = 0;
	printf("到你下了：\n");
	while (1)
	{
		printf("请输入要下的坐标");
		scanf("%d%d", &x, &y);
		if (x >= 1 && x <= Hang && y >= 1 && y <= Lie)//判断X，Y坐标的合法性
		{
			if (QiPan[x - 1][y - 1] == ' ')
			{
				QiPan[x - 1][y - 1] = 'O';
				break;
			}
			else
			{
				printf("该坐标被占用\n");
			}
		}
		else
		{
			printf("坐标错误，请重新输入：\n");
		}
	}
}
void diannaoxiaqi(char QiPan[hang][lie], int Hang, int Lie)
{
	int x = 0;
	int y = 0;
	printf("电脑走：\n");
	while (1)
	{
		x = rand() % Hang;
		y = rand() % Lie;
		if (QiPan[x][y] == ' ')
		{
			QiPan[x][y] = 'X';
			break;
		}
	}
}
int man(char QiPan[hang][lie],int Hang,int Lie)//判断棋盘是不是满了
{
	int i = 0;
	int j = 0;
	for (i = 0;i < Hang;i++)
	{
		for (j = 0;j < Lie;j++)
		{
			if (QiPan[i][j] == ' ')
			{
				return 0;//没满
			}
		}
	}
	return 1;//满了
}
char panduan(char QiPan[hang][lie], int Hang, int Lie)
{
	int i = 0;
	for (i = 0;i < Hang;i++)//横三行
	{
		if (QiPan[i][0] == QiPan[i][1] && QiPan[i][1] == QiPan[i][2] && QiPan[i][1] != ' ')
		{
			return QiPan[i][1];
		}
	}
	for (i = 0;i < Lie;i++)//竖三列
	{
		if (QiPan[0][i] == QiPan[1][i] && QiPan[1][i] == QiPan[2][i] && QiPan[1][i] != ' ')
		{
			return QiPan[1][i];
		}
	}
	if (QiPan[0][0] == QiPan[1][1] && QiPan[1][1] == QiPan[2][2] && QiPan[2][2] != ' ')//'/'这样子斜三
	{
		return QiPan[1][1];
	}
	if (QiPan[0][2] == QiPan[1][1] && QiPan[2][0] == QiPan[1][1] && QiPan[1][1] != ' ')//'\'这样子斜三
	{
		return QiPan[1][1];
	}
	if (man(QiPan, hang, lie) == 1)//判断棋盘是不是满了
	{
		return 'P';//平局
	}
	return 'J';//继续
}
void caidan()
{
	printf("******************************\n");
	printf("*****   1.play   0.exit  *****\n");
	printf("******************************\n");	
}

//游戏的整个算法实现
void game()
{
	char ret = 0;
	//首先创建一个数组—存放走出的棋盘信息
	char QiPan[hang][lie] = { 0 };
	ChuShiHua(QiPan, hang, lie);//初始化棋盘
	DaYinQiPan(QiPan, hang, lie);//打印棋盘
	//下棋
	while (1)
	{
		wanjiaxiaqi(QiPan,hang,lie);//玩家下棋
		DaYinQiPan(QiPan, hang, lie);
		ret=panduan(QiPan,hang,lie);//判断玩家输赢
		if (ret != 'J')
		{
			break;
		}
		diannaoxiaqi(QiPan,hang,lie);//电脑下棋
		DaYinQiPan(QiPan, hang, lie);
		ret=panduan(QiPan, hang, lie);//判断电脑输赢
		if (ret != 'J')
		{
			break;
		}
	}
	if (ret == 'O')
	{
		printf("玩家赢\n");
	}
	else if (ret == 'X')
	{
		printf("电脑赢\n");
	}
	else
	{
		printf("平局\n");
	}
}

void wan()
{
	int n = 0;
	srand((unsigned int)time(NULL));
	do
	{
		caidan();
		printf("玩不玩游戏(1-玩，0-不玩)，请输入：");
		scanf("%d", &n);
		if (n == 1)
		{
			game();
			printf("\n三子棋游戏开始!!!\n");
		}
		else if (n == 0)
		{
			printf("\n退出游戏成功\n");
			break;
		}
		else
		{
			printf("\n输入错误啦，请重新输入：\n");
		}
	} while(n!=0);
}

int main()
{
	wan();
	return 0;
}
